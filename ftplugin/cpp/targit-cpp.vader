"  test file for /ftplugin/cpp/targit-cpp.vim
"  must be run in same directory
"  can simply run :Vader here or :Vader <filename> maybe useful
Execute(source vimscript file):
  let sourcefile = 'targit-cpp.vim'
  if !filereadable(sourcefile)
    echoerr 'Something went wrong. File does not exist: '. sourcefile
  endif
  execute 'source' sourcefile

Before:
  unlet! input expected result
  unlet! g:vader_exception g:vader_throwpoint
  "  files are unchaged at the beginning of tests.
  "  run both git annotate and git diff to check.

  "  check that all lines in files /test/*
  "  are committed, with the same logic as looking for ranges to format.
  let result1 = CollectUncommittedLines(systemlist('git annotate --line-porcelain -M ' . '../../test/files/init.cpp'))
  let result2 = CollectUncommittedLines(systemlist('git annotate --line-porcelain -M ' . '../../test/files/init.h'))
  let result3 = CollectUncommittedLines(systemlist('git annotate --line-porcelain -M ' . '../../test/files/emptyfile'))
  AssertEqual [], result1 
  AssertEqual [], result2 
  AssertEqual [], result3 
  "git diff should have no output.
  let result4 = system('git diff ' . '../../test/files/init.cpp')  
  let result5 = system('git diff ' . '../../test/files/init.h')  
  let result6 = system('git diff ' . '../../test/files/emptyfile')  
  AssertEqual "", result4
  AssertEqual "", result5
  AssertEqual "", result6

After:
  call system('git checkout HEAD ../../test/files/init.cpp')
  call system('git checkout HEAD ../../test/files/init.h')
  call system('git checkout HEAD ../../test/files/emptyfile')

Execute(tautology):
  let input = ""
  let expected = ""
  AssertEqual expected, input

" calling IngestGitAnnotate() from Vader runs the command line 
" invocation from its own custom working directory. 
" However, the stdout return to this call is still written 
" as a string into a list.
Execute(IngestGitAnnotate returns a list):
  let input = type(IngestGitAnnotate())
  let expected = v:t_list
  AssertEqual expected, input

Execute(if IngestGitAnnotate returns a list with contents, each item is a string.):
  let input =  IngestGitAnnotate() 
  let expected = v:t_string
  for entry in input
  AssertEqual expected, type(entry)
  endfor

Execute(CollectUncommittedLines returns a list):
  let input = CollectUncommittedLines([])
  let expected = []
  AssertEqual expected, input

Execute(CollectUncommittedLines throws an error with a string argument type):
  AssertThrows CollectUncommittedLines("string")

Execute(CollectUncommittedLines throws an error with a number argument type):
  AssertThrows CollectUncommittedLines(1)

Execute(CollectUncommittedLines throws an error with a float argument type):
  AssertThrows CollectUncommittedLines(2.424241)

Execute(CollectUncommittedLines throws an error with a dict argument type):
  let diction = #{a: 'aa', b: 'bb'}
  AssertThrows CollectUncommittedLines(diction)

  "TODO funcref

Execute(CollectUncommittedLines throws an error with a boolean argument type):
  AssertThrows CollectUncommittedLines(v:true)

Execute(CollectUncommittedLines throws an error with a false boolean argument type):
  AssertThrows CollectUncommittedLines(v:false)

Execute(CollectUncommittedLines throws an error with a null argument type):
  AssertThrows CollectUncommittedLines(v:null)

Execute(CollectUncommittedLines throws an error with a numbers in list):
  AssertThrows CollectUncommittedLines([1,2])

Execute(CollectUncommittedLines throws an error with floats in list):
  AssertThrows CollectUncommittedLines([1.86523, 2.7523])

Execute(CollectUncommittedLines throws an error with two strings in list):
  AssertThrows CollectUncommittedLines(["StringX", "StringY"])

Execute(CollectUncommittedLines ...or an equal with two strings in list):
  let input = CollectUncommittedLines(["StringX", "StringY"])
  let expected = []
  AssertEqual expected, input 

Execute(CollectUncommittedLines: One matching string in lines [would be returned from IngestGitAnnotate]):
  let input = CollectUncommittedLines(['0000000000000000000000000000000000000000 1 1 1', 'string2'])
  let expected = ['0000000000000000000000000000000000000000 1 1 1'] 
  AssertEqual expected, input

Execute(CollectUncommittedLines: No matching strings in lines, hash short by one digit):
  let input = CollectUncommittedLines(['000000000000000000000000000000000000000 1 1 1', 'string2'])
  let expected = [] 
  AssertEqual expected, input

Execute(CollectUncommittedLines: No matching strings in lines, hash long by one digit):
  let input = CollectUncommittedLines(['00000000000000000000000000000000000000000 1 1 1', 'string2'])
  let expected = [] 
  AssertEqual expected, input

Execute(CollectUncommittedLines: No matching strings in lines, hash off by one digit substitution):
  let input = CollectUncommittedLines(['0000000000100000000000000000000000000000 1 1 1', 'string2'])
  let expected = [] 
  AssertEqual expected, input

Execute(CollectUncommittedLines: One matching string in lines with realistic values):
  let input = CollectUncommittedLines(['0000000000000000000000000000000000000000 1 1 1', '19d605f410c83235ae7E757445e7d0866fcfe259 2 2 1'])
  let expected = ['0000000000000000000000000000000000000000 1 1 1'] 
  AssertEqual expected, input

Execute(CollectUncommittedLines: Two matching string in lines [would be returned from IngestGitAnnotate]):
  let input = CollectUncommittedLines(['0000000000000000000000000000000000000000 1 1 1', '0000000000000000000000000000000000000000 2 2 1'])
  let expected = ['0000000000000000000000000000000000000000 1 1 1', '0000000000000000000000000000000000000000 2 2 1'] 
  AssertEqual expected, input

Execute(CollectUncommittedLines: Two matching string in lines with not-matched in between):
  let input = CollectUncommittedLines(['0000000000000000000000000000000000000000 1 1 1', '19d605f410c83235ae7E757445e7d0866fcfe259 2 2 2', '19d605f410c83235ae7E757445e7d0866fcfe259 3 3', '0000000000000000000000000000000000000000 4 4 1'])
  let expected = ['0000000000000000000000000000000000000000 1 1 1', '0000000000000000000000000000000000000000 4 4 1'] 
  AssertEqual expected, input

Execute(CollectUncommittedLines: Two matching string in lines with not-matched in between, double digit lines):
  let input = CollectUncommittedLines(['0000000000000000000000000000000000000000 11 11 1', '19d605f410c83235ae7E757445e7d0866fcfe259 12 12 2', '19d605f410c83235ae7E757445e7d0866fcfe259 13 13', '0000000000000000000000000000000000000000 14 14 1'])
  let expected = ['0000000000000000000000000000000000000000 11 11 1', '0000000000000000000000000000000000000000 14 14 1'] 
  AssertEqual expected, input

Execute(CollectUncommittedLines: Two matching string in lines with not-matched in between, triple digit lines):
  let input = CollectUncommittedLines(['0000000000000000000000000000000000000000 111 111 1', '19d605f410c83235ae7E757445e7d0866fcfe259 112 112 2', '19d605f410c83235ae7E757445e7d0866fcfe259 113 113', '0000000000000000000000000000000000000000 114 114 1'])
  let expected = ['0000000000000000000000000000000000000000 111 111 1', '0000000000000000000000000000000000000000 114 114 1'] 
  AssertEqual expected, input

Execute(CollectUncommittedLines: Two matching string in lines with not-matched in between, quadruple digit lines):
  let input = CollectUncommittedLines(['0000000000000000000000000000000000000000 1111 1111 1', '19d605f410c83235ae7E757445e7d0866fcfe259 1112 1112 2', '19d605f410c83235ae7E757445e7d0866fcfe259 1113 1113', '0000000000000000000000000000000000000000 1114 1114 1'])
  let expected = ['0000000000000000000000000000000000000000 1111 1111 1', '0000000000000000000000000000000000000000 1114 1114 1'] 
  AssertEqual expected, input

Execute(CleanLines returns a list):
  let input = CleanLines([])
  let expected = []
  AssertEqual expected, input

Execute(CleanLines throws an error with a string argument type):
  AssertThrows CleanLines("string")

Execute(CleanLines throws an error with a number argument type):
  AssertThrows CleanLines(1)

Execute(CleanLines throws an error with a float argument type):
  AssertThrows CleanLines(2.424241)

Execute(CleanLines throws an error with a dict argument type):
  let diction = #{a: 'aa', b: 'bb'}
  AssertThrows CleanLines(diction)

  "TODO funcref

Execute(CleanLines throws an error with a boolean argument type):
  AssertThrows CleanLines(v:true)

Execute(CleanLines throws an error with a false boolean argument type):
  AssertThrows CleanLines(v:false)

Execute(CleanLines throws an error with a null argument type):
  AssertThrows CleanLines(v:null)

Execute(CleanLines throws an error with a numbers in list):
  AssertThrows CleanLines([1,2])

Execute(CleanLines throws an error with floats in list):
  AssertThrows CleanLines([1.86523, 2.7523])

Execute(CleanLines throws an error with two strings in list):
  AssertThrows CleanLines(["StringX", "StringY"])

Execute(CleanLines throws error if line numbers are duplicated):
  AssertThrows CleanLines(['0000000000000000000000000000000000000000 1 1 1', '0000000000000000000000000000000000000000 1 1 1', '0000000000000000000000000000000000000000 1 1 1', '0000000000000000000000000000000000000000 1 1 1', '0000000000000000000000000000000000000000 1 1 1', '0000000000000000000000000000000000000000 1 1 1', '0000000000000000000000000000000000000000 1 1 1', '0000000000000000000000000000000000000000 1 1 1', '0000000000000000000000000000000000000000 1 1 1', '0000000000000000000000000000000000000000 1 1 1', '0000000000000000000000000000000000000000 1 1 1', '0000000000000000000000000000000000000000 1 1 1', '0000000000000000000000000000000000000000 1 1 1'])

Execute(CleanLines throws error if line numbers are out of order):
  AssertThrows CleanLines(['0000000000000000000000000000000000000000 2 2', '0000000000000000000000000000000000000000 1 1 2'])

Execute(CleanLines returns the same length list as input: length of list):
  let input = CleanLines(['0000000000000000000000000000000000000000 1 1 13', '0000000000000000000000000000000000000000 2 2', '0000000000000000000000000000000000000000 3 3', '0000000000000000000000000000000000000000 4 4', '0000000000000000000000000000000000000000 5 5', '0000000000000000000000000000000000000000 6 6', '0000000000000000000000000000000000000000 7 7', '0000000000000000000000000000000000000000 8 8', '0000000000000000000000000000000000000000 9 9', '0000000000000000000000000000000000000000 10 10', '0000000000000000000000000000000000000000 11 11', '0000000000000000000000000000000000000000 12 12', '0000000000000000000000000000000000000000 13 13'])
  let expected = 13 
  AssertEqual expected, len(input) 

Execute(CleanLines returns the same length list as input: list type):
  let input = CleanLines(['0000000000000000000000000000000000000000 1 1 13', '0000000000000000000000000000000000000000 2 2', '0000000000000000000000000000000000000000 3 3', '0000000000000000000000000000000000000000 4 4', '0000000000000000000000000000000000000000 5 5', '0000000000000000000000000000000000000000 6 6', '0000000000000000000000000000000000000000 7 7', '0000000000000000000000000000000000000000 8 8', '0000000000000000000000000000000000000000 9 9', '0000000000000000000000000000000000000000 10 10', '0000000000000000000000000000000000000000 11 11', '0000000000000000000000000000000000000000 12 12', '0000000000000000000000000000000000000000 13 13'])
  AssertEqual v:t_list, type(input)

Execute(CleanLines: Throws error if no matching strings in list, if hash off by one digit substitution [invalid input]):
  AssertThrows CleanLines(['0000000000100000000000000000000000000000 1 1 1'])
  
Execute(CleanLines: Throws error if no matching strings in list, noise [invalid input]):
  AssertThrows CleanLines(['&%@EbV@U^!R(&lhB!O*61UYTv79nF!&^T1', 'JtHTExUt6d$756G{]KNMN&^r%s4sp8i7G*I&654d&%$sFV'])

Execute(CleanLines: Throws error with zero line number):
  AssertThrows CleanLines(['0000000000000000000000000000000000000000 0 0 1'])

Execute(CleanLines: Throws error with negative line number):
  AssertThrows CleanLines(['0000000000000000000000000000000000000000 -1 -1 1'])

Execute(CleanLines: Simple match):
  let input = CleanLines(['0000000000000000000000000000000000000000 1 1 1'])
  let expected = [1] 
  AssertEqual expected, input

Execute(CleanLines: Two matching strings in uncommittedlines):
  let input = CleanLines(['0000000000000000000000000000000000000000 1 1 2', '0000000000000000000000000000000000000000 2 2'])
  let expected = [1, 2] 
  AssertEqual expected, input

Execute(CleanLines: Throws error if two matching strings in lines, with not-matched in between, quadruple digit lines [invalid input]):
  AssertThrows CleanLines(['0000000000000000000000000000000000000000 1111 1111 1', '19d605f410c83235ae7E757445e7d0866fcfe259 1112 1112 2', '19d605f410c83235ae7E757445e7d0866fcfe259 1113 1113', '0000000000000000000000000000000000000000 1114 1114 1'])

Execute(CleanLines: Many lines up to 5 digits):
  let input = CleanLines(['0000000000000000000000000000000000000000 1 1 2', '0000000000000000000000000000000000000000 2 2', '0000000000000000000000000000000000000000 23 23 3', '0000000000000000000000000000000000000000 24 24', '0000000000000000000000000000000000000000 25 25', '0000000000000000000000000000000000000000 255 255 2', '0000000000000000000000000000000000000000 256 256', '0000000000000000000000000000000000000000 2701 2702 1', '0000000000000000000000000000000000000000 29752 29724 1'])
  let expected = [1, 2, 23, 24, 25, 255, 256, 2702, 29724] 
  AssertEqual expected, input

Execute(CleanLines: Throws error with many lines up to 5 digits, but one out of order [invalid input]):
  AssertThrows CleanLines(['0000000000000000000000000000000000000000 1 1 2', '0000000000000000000000000000000000000000 23 23 3', '0000000000000000000000000000000000000000 2 2', '0000000000000000000000000000000000000000 24 24', '0000000000000000000000000000000000000000 25 25', '0000000000000000000000000000000000000000 255 255 2', '0000000000000000000000000000000000000000 256 256', '0000000000000000000000000000000000000000 2701 2702 1', '0000000000000000000000000000000000000000 29752 29724 1'])

Execute(CleanLines: Throws error with many lines up to 5 digits, but one is duplicated [invalid input]):
  AssertThrows CleanLines(['0000000000000000000000000000000000000000 1 1 2', '0000000000000000000000000000000000000000 2 2', '0000000000000000000000000000000000000000 2 2', '0000000000000000000000000000000000000000 24 24', '0000000000000000000000000000000000000000 25 25', '0000000000000000000000000000000000000000 255 255 2', '0000000000000000000000000000000000000000 256 256', '0000000000000000000000000000000000000000 2701 2702 1', '0000000000000000000000000000000000000000 29752 29724 1'])

Execute(CreateRanges: Basic range, just 1 line):
  let input = CreateRanges([1])
  let expected = [[1, 1]]
  AssertEqual expected, input

Execute(CreateRanges: Basic range, two line span):
  let input = CreateRanges([1, 2])
  let expected = [[1, 2]]
  AssertEqual expected, input

"TODO no uncommittedlines

Execute(CreateRanges: Basic range, 9 line span):
  let input = CreateRanges([1, 2, 3, 4, 5, 6, 7, 8, 9])
  let expected = [[1, 9]]
  AssertEqual expected, input

Execute(CreateRanges: Two spans):
  let input = CreateRanges([1, 2, 3, 4, 6, 7, 8, 9])
  let expected = [[1, 4],[6, 9]]
  AssertEqual expected, input

Execute(CreateRanges: Two spans, two digit line numbers):
  let input = CreateRanges([21, 22, 23, 24, 26, 27, 28, 29])
  let expected = [[21, 24],[26, 29]]
  AssertEqual expected, input

Execute(CreateRanges: Two spans, three digit line numbers):
  let input = CreateRanges([321, 322, 323, 324, 326, 327, 328, 329])
  let expected = [[321, 324],[326, 329]]
  AssertEqual expected, input

Execute(CreateRanges: Two spans, four digit line numbers):
  let input = CreateRanges([4321, 4322, 4323, 4324, 4326, 4327, 4328, 4329])
  let expected = [[4321, 4324],[4326, 4329]]
  AssertEqual expected, input

Execute(CreateRanges: Two spans, five digit line numbers):
  let input = CreateRanges([54321, 54322, 54323, 54324, 54326, 54327, 54328, 54329])
  let expected = [[54321, 54324],[54326, 54329]]
  AssertEqual expected, input

Execute(CreateRanges: Multiple spans and single line ranges, up to seven digit line numbers, ranges continue across line digit number changes):
  let input = CreateRanges([1, 23, 24, 25, 333, 334, 335, 999, 1000, 1001, 1002, 31337, 54321, 54322, 54323, 54324, 54326, 54327, 54328, 54329, 7654321])
  let expected = [[1,1],[23,25],[333,335],[999,1002],[31337,31337],[54321, 54324],[54326, 54329],[7654321,7654321]]
  AssertEqual expected, input

Execute(CreateRanges: empty list [invalid input] still does not produce a range):
  let input = CreateRanges([])
  let expected = []
  AssertEqual expected, input

Execute(CreateRanges throws an error with a string argument type):
  AssertThrows CreateRanges("string")

Execute(CreateRanges throws an error with a number argument type):
  AssertThrows CreateRanges(1)

Execute(CreateRanges throws an error with a float argument type):
  AssertThrows CreateRanges(2.424241)

Execute(CreateRanges throws an error with a dict argument type):
  let diction = #{a: 'aa', b: 'bb'}
  AssertThrows CreateRanges(diction)

  "TODO funcref

Execute(CreateRanges throws an error with a boolean argument type):
  AssertThrows CreateRanges(v:true)

Execute(CreateRanges throws an error with a false boolean argument type):
  AssertThrows CreateRanges(v:false)

Execute(CreateRanges throws an error with a null argument type):
  AssertThrows CreateRanges(v:null)

Execute(change /test/ file by replacing whole file part 1):
  call system('echo . > ../../test/files/init.cpp')
  call system('echo . > ../../test/files/init.h')

"  to ensure before+after is working
Execute(change /test/ file by replacing whole file part 2):
  AssertEqual 0, 0
  
Execute(unchanged .cpp file has no detected Uncommitted Lines):
  let expected = []
  let result = CollectUncommittedLines(systemlist('git annotate --line-porcelain -M ' . '../../test/files/init.cpp'))
  AssertEqual expected, result

Execute(unchanged .h file has no detected Uncommitted Lines):
  let expected = []
  let result = CollectUncommittedLines(systemlist('git annotate --line-porcelain -M ' . '../../test/files/init.h'))
  AssertEqual expected, result

Execute(change /test/ file by shell concatination, last line of .cpp):
  call system('echo . >> ../../test/files/init.cpp') 
  let expected = ['0000000000000000000000000000000000000000 1808 1808 1']
  let result = CollectUncommittedLines(systemlist('git annotate --line-porcelain -M ' . '../../test/files/init.cpp'))
  AssertEqual expected, result

Execute(change /test/ file by shell concatination, last line of .h):
  call system('echo . >> ../../test/files/init.h')
  let expected = ['0000000000000000000000000000000000000000 43 43 1']
  let result = CollectUncommittedLines(systemlist('git annotate --line-porcelain -M ' . '../../test/files/init.h'))
  AssertEqual expected, result

Execute(change /test/ file by shell concatination, last line of .cpp):
  call system('echo . > ../../test/files/emptyfile') 
  let expected = ['0000000000000000000000000000000000000000 1 1 1']
  let result = CollectUncommittedLines(systemlist('git annotate --line-porcelain -M ' . '../../test/files/emptyfile'))
  AssertEqual expected, result

"  bash is okay, but ideally, manipulate and save from nvim.

"  the following set of tests show these cli-commands-to-nvim 
"  only modify the lines dictated, and then the file is saved
Execute(cli call to nvim, with --clean and minimal config file, to modify first line):
  call system('nvim --clean -u ../../test/config/init-plugintest-minimal.vim -c "1 s/^/somethingnew" -c ":w" ../../test/files/init.cpp') 
  let expected = ['0000000000000000000000000000000000000000 1 1 1']
  let result = CollectUncommittedLines(systemlist('git annotate --line-porcelain -M ' . '../../test/files/init.cpp'))
  AssertEqual expected, result

Execute(cli call to nvim, with --clean and minimal config file, to modify 1 line in middle {2 digit line number}):
  call system('nvim --clean -u ../../test/config/init-plugintest-minimal.vim -c "61 s/^/somethingnew" -c ":w" ../../test/files/init.cpp') 
  let expected = ['0000000000000000000000000000000000000000 61 61 1']
  let result = CollectUncommittedLines(systemlist('git annotate --line-porcelain -M ' . '../../test/files/init.cpp'))
  AssertEqual expected, result

Execute(cli call to nvim, with --clean and minimal config file, to modify 1 line in middle {3 digit line number}):
  call system('nvim --clean -u ../../test/config/init-plugintest-minimal.vim -c "316 s/^/somethingnew" -c ":w" ../../test/files/init.cpp') 
  let expected = ['0000000000000000000000000000000000000000 316 316 1']
  let result = CollectUncommittedLines(systemlist('git annotate --line-porcelain -M ' . '../../test/files/init.cpp'))
  AssertEqual expected, result

Execute(cli call to nvim, with --clean and minimal config file, to modify 1 line in middle {4 digit line number}):
  call system('nvim --clean -u ../../test/config/init-plugintest-minimal.vim -c "1156 s/^/somethingnew" -c ":w" ../../test/files/init.cpp') 
  let expected = ['0000000000000000000000000000000000000000 1156 1156 1']
  let result = CollectUncommittedLines(systemlist('git annotate --line-porcelain -M ' . '../../test/files/init.cpp'))
  AssertEqual expected, result

Execute(cli call to nvim, minimal config file, to modify first line):
  call system('nvim -u ../../test/config/init-plugintest-minimal.vim -c "1 s/^/somethingnew" -c ":w" ../../test/files/init.cpp') 
  let expected = ['0000000000000000000000000000000000000000 1 1 1']
  let result = CollectUncommittedLines(systemlist('git annotate --line-porcelain -M ' . '../../test/files/init.cpp'))
  AssertEqual expected, result

Execute(cli call to nvim, minimal config file, to modify 1 line in middle {2 digit line number}):
  call system('nvim -u ../../test/config/init-plugintest-minimal.vim -c "61 s/^/somethingnew" -c ":w" ../../test/files/init.cpp') 
  let expected = ['0000000000000000000000000000000000000000 61 61 1']
  let result = CollectUncommittedLines(systemlist('git annotate --line-porcelain -M ' . '../../test/files/init.cpp'))
  AssertEqual expected, result

Execute(cli call to nvim, minimal config file, to modify 1 line in middle {3 digit line number}):
  call system('nvim -u ../../test/config/init-plugintest-minimal.vim -c "316 s/^/somethingnew" -c ":w" ../../test/files/init.cpp') 
  let expected = ['0000000000000000000000000000000000000000 316 316 1']
  let result = CollectUncommittedLines(systemlist('git annotate --line-porcelain -M ' . '../../test/files/init.cpp'))
  AssertEqual expected, result

Execute(cli call to nvim, minimal config file, to modify 1 line in middle {4 digit line number}):
  call system('nvim -u ../../test/config/init-plugintest-minimal.vim -c "1156 s/^/somethingnew" -c ":w" ../../test/files/init.cpp') 
  let expected = ['0000000000000000000000000000000000000000 1156 1156 1']
  let result = CollectUncommittedLines(systemlist('git annotate --line-porcelain -M ' . '../../test/files/init.cpp'))
  AssertEqual expected, result

"  sourcing plugin in following test
Execute(cli call to nvim, config file sourcing plugin, to modify first line):
  call system('nvim -u ../../test/config/init-plugintest.vim -c "1 s/^/somethingnew" -c ":w" ../../test/files/init.cpp') 
  let expected = ['0000000000000000000000000000000000000000 1 1 1']
  let result = CollectUncommittedLines(systemlist('git annotate --line-porcelain -M ' . '../../test/files/init.cpp'))
  AssertEqual expected, result

Execute(cli call to nvim, config file sourcing plugin, to modify first line and then format new line):
  call system('nvim -u ~/backport-clang/test/config/init-plugintest.vim -c "1 s/^/                  \/\/new " -c ":w" -c ":w" ../../test/files/init.cpp') 
  let expected = ['0000000000000000000000000000000000000000 1 1 1']
  let result = CollectUncommittedLines(systemlist('git annotate --line-porcelain -M ' . '../../test/files/init.cpp'))
  AssertEqual expected, result
  let diffexpected = ''
  let diffoutput = system('git diff ' . '../../test/files/init.cpp')  
  AssertEqual diffexpected, diffoutput

"  testing could be expanded into a collection of possible states for file changes
"  tests could be split between vim logic tests and external file tests

"  TODO : investigate 
"  vader_exception and vader_throwpoint
"  (unit integration)
"  ... various extensions
"  .. non C++ file with C++ extension
