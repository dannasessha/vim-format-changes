"  test file for /ftplugin/cpp.vim
"  may be needed to create a new test flow, as mine is currently
"  based off exer, and we'd like to be able to run without added config
"  can simply run :Vader here or :Vader <filename> maybe useful

Before:
  unlet! input expected

Execute(source vimscript file):
  let sourcefile = 'cpp.vim'
  if !filereadable(sourcefile)
    echoerr 'Something went wrong. File does not exist: '. sourcefile
  endif
  execute 'source' sourcefile

Execute(tautology):
  let input = ""
  let expected = ""
  AssertEqual expected, input

" calling IngestGitBlame() from Vader runs the command line 
" invocation from its own custom
" working directory. However, the stdout return to this call 
" is still written as a string into a list.
Execute(IngestGitBlame returns a list):
  let input = type(IngestGitBlame())
  let expected = v:t_list
  AssertEqual expected, input

Execute(if IngestGitBlame returns a list with contents, each item is a string.):
  let input =  IngestGitBlame() 
  let expected = v:t_string
  for entry in input
  AssertEqual expected, type(entry)
  endfor

  " this could be expanded into a collection of possible states for file changes

"  TODO : tests for external files, starting with empty file 
"  (unit integration)
"  then:
"  full file, no modifications
"  completely deleted file
"  various extensions
"  .. non C++ file with C++ extension
